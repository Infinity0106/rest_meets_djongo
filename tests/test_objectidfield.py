"""
test_objectidfield
------------------

Tests DRF serialization for Djongo ObjectID type fields
"""

from . import test_settings

from bson import ObjectId
from rest_framework.exceptions import ValidationError
import pytest

from rest_meets_djongo.fields import ObjectIdField


def test_to_internal_value():
    """
    For object ID fields, the internal value should be an ObjectID
    object, appropriately formatted w/ MongoDB's setup.

    We use an ObjectID key generated by Djongo previously, utilizing its
    ObjectIDField (for models) to do so
    """
    obj_key = "5d08078b1f7eb051eafe2390"

    ref_obj = ObjectId(obj_key)
    field = ObjectIdField()
    new_obj = field.to_internal_value(obj_key)

    assert new_obj.__eq__(ref_obj)


def test_to_representation():
    """
    Confirm that object ID objects can still be reconstructed once
    serialized. This allows for them to be used as primary key queries
    by DRF (I.E. '/students/5d08078b1f7eb051eafe2390')
    """
    ref_obj = ObjectId()
    ref_id = ref_obj.__str__()

    field = ObjectIdField()
    obj_id = field.to_representation(ref_obj)

    assert ref_id == obj_id


def test_conversion_equivalence():
    """
    Confirm that serialization and de-serialization of ObjectIDs is a
    lossless operation (and thus its use won't create unexpected
    behaviours) by default.
    """
    obj = ObjectId()
    field = ObjectIdField()

    obj_repr = field.to_representation(obj)
    new_obj = field.to_internal_value(obj_repr)

    assert obj.__eq__(new_obj)


def test_invalid_rejection():
    """
    Confirm that invalid ObjectID tags are rejected when attempting to
    serialize them
    """
    bad_key = "tooshort"

    field = ObjectIdField()
    with pytest.raises(ValidationError) as e:
        field.to_internal_value(bad_key)

